import numpy as np

MESSAGE_SIZE = 16  # messages can only 16 bytes long

s_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

inv_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)


def rotate(matrix: np.ndarray, angle) -> np.ndarray:
    return np.rot90(matrix, angle)  # -1 is clockwise, 1 is counter clockwise


def addRoundKey(state: np.ndarray, key: int) -> np.ndarray:
    # for rowMessage, keyMessage in zip(state, key):
    #     for messageElement, keyElement in zip(rowMessage, keyMessage):
    #         np.bitwise_xor(messageElement, keyElement)
    # return state
    return np.bitwise_xor(state, key)


def subWord(byte):
    row = (byte & 0xF0) >> 4  # Get the first 4 bits (high-order bits)
    col = byte & 0x0F  # Get the last 4 bits (low-order bits)
    return s_box[row * 16 + col]

def gFunction(word, rConRound):
    # rotate the word
    word = [word[1], word[2], word[3], word[0]]
    # sub the word
    for i in range(4):
        word[i] = subWord(word[i])
    # add the rcon
    rCon = [rConRound, 0, 0, 0]
    word = np.bitwise_xor(word, rCon)
def keyExpansion(keyMatrix):
    Nk = 4
    Nr = 10
    Nb = 4
    Rcon = np.array([0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36])
    # expanded_key = [key[i:i + 4] for i in range(0, Nk * 4, 4)]
    expanded_key = [keyMatrix]
    keyWords = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

    # generate the 4 words that will generate the rest of the keys
    for i in range(4):
        for j in range(4):
            keyWords[i][j] = keyMatrix[j][i]

    for i in range(10):
        
    return expanded_key


def shiftRows(message):
    row0 = message[0]
    row1 = message[1]
    newRow1 = [row1[1], row1[2], row1[3], row1[0]]
    # newRow1 = np.ndarray([row1[1], row1[2], row1[3], row1[0]])
    row2 = message[2]
    newRow2 = [row2[2], row2[3], row2[0], row2[1]]
    # newRow2 = np.ndarray(row2[2], row2[3], row2[0], row2[1])

    row3 = message[3]
    # newRow3 = np.ndarray(row3[3], row3[2], row3[1], row3[0])
    newRow3 = [row3[3], row3[2], row3[1], row3[0]]
    newOrder = np.ndarray(shape=(4, 4))
    newOrder[0] = row0
    newOrder[1] = newRow1
    newOrder[2] = newRow2
    newOrder[3] = newRow3
    # newOrder = np.ndarray([row0, newRow1, newRow2, newRow3])
    return newOrder


def rotAesEncrypt(message, key) -> np.ndarray:
    # start by adding the original key
    keys = keyExpansion(key)
    message = addRoundKey(message, keys[0])

    for i in range(9):
        # in each round we start with subBytes
        for row in message:
            for element in row:
                element = subWord(element)
        # shift rows
        message = shiftRows(message)
        # rotate the matrix
        message = rotate(message, -1)
        message = addRoundKey(message, keys[i + 1])

    # after we are done with the rounds we do the last round
    for row in message:
        for element in row:
            element = subWord(element)

    message = shiftRows(message)
    message = addRoundKey(message, keys[-1])
    return message


if __name__ == '__main__':
    with open('Short encryption/message_short.txt', 'rb') as file:
        message = file.read()
        message_array = bytearray(message)
        # message_array = np.frombuffer(message, dtype=np.uint8)
        # message_matrix = np.array(message_array)
        # message_matrix.reshape((4, 4))
        message_matrix = [[], [], [], []]
        for i in range(4):
            for j in range(4):
                message_matrix[j].append(hex(message_array[i + j]))
        # message_matrix = message_matrix.astype(np.uint8)
    with open('Short encryption/keys_short.txt', 'rb') as file:
        keys = file.read()
        key1 = keys[:16]
        key2 = keys[16:32]
        keys_array1 = bytearray(key1)
        keys_matrix1 = [[], [], [], []]

        keys_array2 = bytearray(key2)
        keys_matrix2 = [[], [], [], []]

        for i in range(4):
            for j in range(4):
                keys_matrix1[j].append(hex(keys_array1[i + j]))
                keys_matrix2[j].append(hex(keys_array2[i + j]))
        # keys_array1 = np.frombuffer(key1, dtype=np.uint8)
        # keys_array2 = np.frombuffer(key2, dtype=np.uint8)
        # keys_matrix1 = keys_array1.reshape((4, 4))
        # keys_matrix2 = keys_array2.reshape((4, 4))
        # keys_matrix1 = keys_matrix1.astype(np.uint8)
        # keys_matrix2 = keys_matrix2.astype(np.uint8)
    encrypted_message = rotAesEncrypt(rotAesEncrypt(message_matrix, keys_matrix1), keys_matrix2)
    print(encrypted_message)
